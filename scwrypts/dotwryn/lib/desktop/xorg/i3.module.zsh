#####################################################################

use desktop/colorscheme --group dotwryn

DEPENDENCIES+=(basename readlink sed yq)

#####################################################################

I3__GENERATE_CUSTOM_CONFIG__USAGE() {
	USAGE__options+="
		--safe            preserve old config (or fail if old conf does not exist)
		--override-file   fully qualified path to the override yaml file (default ~/.config/i3/local.yaml)
	"
	
	USAGE__description+="
		Since i3wm does not provide a way to load config values dynamically,
		I run this script to generate colorscheme values and other per-machine
		overrides.
	
		Uses the current, active colorscheme and local overrides specified in
		~/.config/i3/local.yaml
	"
}

#####################################################################

I3__GENERATE_CUSTOM_CONFIG() {
	local SAFE=false
	local CONFIG_DEFAULT_FILE="$DOTWRYN/config/i3.config.yaml"
	local CONFIG_OVERRIDE_FILE="$HOME/.config/i3/local.yaml"

	while [[ $# -gt 0 ]]
	do
		case $1 in
			--safe ) SAFE=true ;;
			--override-file )
				[ -f "$2" ] || ERROR "no file '$2' can be found"
				CONFIG_OVERRIDE_FILE="$2"
				;;
		esac
	done

	CHECK_ERRORS

	[ -f "$CONFIG_OVERRIDE_FILE" ] || {
		mkdir -p "$(dirname $CONFIG_OVERRIDE_FILE)"
		echo '---' > "$CONFIG_OVERRIDE_FILE"
	}

	local CONFIG="$(YQ eval-all '. as $item ireduce ({}; . * $item)' "$CONFIG_DEFAULT_FILE" "$CONFIG_OVERRIDE_FILE")"
	[ $CONFIG ] \
		|| ERROR "unable to retrieve i3 config yaml (see above)" \
		|| return 1 \
		;

	GET()   { echo "$CONFIG" | YQ -r $@; }
	COLOR() { GET_COLORSCHEME_HEX $@;    }

	local I3_CONFIG="$HOME/.config/i3/config"
	: \
		&& STATUS "generating configuration" \
		&& {
			echo "# i3 config file (v4)"
			echo "# generated by 'scwrypts generate i3 config' (do not edit directly)"
			echo "# sources: "
			echo "#   - i3 config base  : $DOTWRYN/config/i3.conf"
			echo "#   - custom values   : $CONFIG_DEFAULT_FILE"
			echo "#   - override values : $CONFIG_OVERRIDE_FILE"

			case $(GET .statusbar.type) in
				i3status )
					echo 'set $refresh_statusbar killall -SIGUSR1 i3status'
					echo 'bar { status_command i3status }'
					;;
				polybar )
					echo "exec_always --no-startup-id $DOTWRYN/bin/polybar &"
					echo "exec --no-startup-id i3-msg workspace 1"
					;;
			esac
			} > "$I3_CONFIG.temp" \
		&& sed "
				/Legacy Defaults/,\$d
				/^#/d
				/^\s*$/d
				s/\s\+/ /g

				s/^\(font\) .*[0-9]\+$/\1 $(GET .font.family) $(GET .font.size)/

				s^\(bindsym \$mod+space exec --no-startup-id\).*$\1 $(GET .application-launcher)

				s^\([ 	]\+status_command\) .*$\1 $(GET .bar.status)
				s^\(set \$refresh_statusbar\) .*$\1 $(GET .bar.refresh)

				s/^\(gaps inner\) .*$/\1 $(GET .gaps.inner)/
				s/^\(gaps outer\) .*$/\1 $(GET .gaps.outer)/

				s/^\(# color settings\).*$/\1 (theme '$(basename $(readlink -f "$DOTWRYN/colorschemes/active/main.conf") | sed 's/\.conf//')')/

				s/\(^set \$FOCUSED_\(BORDER\|BACKGROUND\|CHILD_BORDER\).*#\).*/\1$(COLOR .i3.focused.border .material.secondary.500 .ansi.green.bright)/
				s/\(^set \$FOCUSED_INDICATOR.*#\).*/\1$(COLOR .i3.focused.indicator .material.secondary.700 .ansi.green.regular)/
				s/\(^set \$FOCUSED_TEXT.*#\).*/\1$(COLOR .i3.focused.text .material.foreground.secondary.500 .foreground)/

				s/\(^set \$INACTIVE_\(BORDER\|BACKGROUND\|CHILD_BORDER\).*#\).*/\1$(COLOR .i3.inactive.border .material.primary.500 .ansi.blue.bright)/
				s/\(^set \$INACTIVE_INDICATOR.*#\).*/\1$(COLOR .i3.inactive.indicator .material.primary.600 .ansi.blue.regular)/
				s/\(^set \$INACTIVE_TEXT.*#\).*/\1$(COLOR .i3.inactive.text .material.foreground.primary.500 .foreground)/

				s/\(^set \$UNFOCUSED_\(BORDER\|BACKGROUND\|CHILD_BORDER\).*#\).*/\1$(COLOR .i3.unfocused.border .material.primary.700 .ansi.yellow.bright)/
				s/\(^set \$UNFOCUSED_INDICATOR.*#\).*/\1$(COLOR .i3.unfocused.indicator .material.primary.900 .ansi.yellow.regular)/
				s/\(^set \$UNFOCUSED_TEXT.*#\).*/\1$(COLOR .i3.unfocused.text .material.foreground.primary.700 .foreground)/

				s/\(^set \$URGENT_\(BORDER\|BACKGROUND\|CHILD_BORDER\).*#\).*/\1$(COLOR .i3.urgent.border .material.error.500 .ansi.red.bright)/
				s/\(^set \$URGENT_INDICATOR.*#\).*/\1$(COLOR .i3.urgent.indicator .material.error.700 .ansi.red.regular)/
				s/\(^set \$URGENT_TEXT.*#\).*/\1$(COLOR .i3.urgent.text .material.foreground.error.500 .foreground)/

				s/\(^set \$PLACEHOLDER_\(BORDER\|BACKGROUND\|CHILD_BORDER\).*#\).*/\1$(COLOR .i3.placeholder.border .material.primary.300 .ansi.cyan.bright)/
				s/\(^set \$PLACEHOLDER_INDICATOR.*#\).*/\1$(COLOR .i3.placeholder.indicator .material.primary.100 .ansi.cyan.regular)/
				s/\(^set \$PLACEHOLDER_TEXT.*#\).*/\1$(COLOR .i3.placeholder.text .material.foreground.primary.300 .foreground)/
			" "$DOTWRYN/config/i3.conf" > "$I3_CONFIG.temp2" \
		&& grep "^font " "$I3_CONFIG.temp2" >> "$I3_CONFIG.temp" \
		&& grep "^set " "$I3_CONFIG.temp2" >> "$I3_CONFIG.temp" \
		&& grep "^bindsym " "$I3_CONFIG.temp2" | sort -u >> "$I3_CONFIG.temp" \
		&& grep -v "^\(bindsym\|set\|font\) " "$I3_CONFIG.temp2" >> "$I3_CONFIG.temp" \
		&& { GET '.i3configs[]' 2>/dev/null >> "$I3_CONFIG.temp"; true }\
		&& rm "$I3_CONFIG.temp2" \
		&& STATUS "validating config" \
		&& i3 -C -c "$I3_CONFIG.temp" \
		|| ERROR "unable to produce config, or produced an invalid config (see above or '$I3_CONFIG.temp')" \
		|| return 1

	[[ $SAFE =~ true ]] && [ -f "$I3_CONFIG" ] && {
		local BACKUP_FILE BACKUP_FILE_BASE="$I3_CONFIG.bak"
		for x in {0..99}
		do
			BACKUP_FILE="$BACKUP_FILE_BASE.$x"
			[ ! -f "$BACKUP_FILE" ] && break
		done

		mv "$I3_CONFIG" "$BACKUP_FILE" && {
			SUCCESS "saved old config to '$BACKUP_FILE'"
		} || {
			WARNING 'failed to preserve old config'
			yN 'any existing config will be overwritten; continue?'
		}
	}

	: \
		&& mv "$I3_CONFIG.temp" "$I3_CONFIG" \
		&& SUCCESS "successfully generated i3 config" \
		|| ERROR "something went wrong when moving config (check '$(dirname $I3_CONFIG)')" \
		|| return 1 \
		;

	: \
		&& pgrep i3 &>/dev/null \
		&& i3-msg restart &>/dev/null  \
		&& STATUS 'reloaded config for current session' \
		;

	return 0
}
